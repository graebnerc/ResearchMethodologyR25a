{
  "hash": "8fb593169b6700e5d7ff84c42eb7761d",
  "result": {
    "markdown": "---\ntitle: \"Exercises for Recap Session 1\"\ndate: \"2024-04-18\"\ndate-modified: last-modified\nformat: \n    html: \n        highlight-style: github\n    pdf: \n        toc: false\n---\n\n\n\n# Exercise 1: Basic object types I\n\n1. Create a vector containing the numbers `2`, `5`, `2.4` and `11`.\n\n2. Replace the second element with `5.9`.\n\n3. Add the elements `3` and `1` to the beginning, and the elements \n`\"8.0\"` and `\"9.2\"` to the end of the vector.\n\n4. Create a vector with the numbers from -8 to 9 (step size: 0.5)\n\n5. Compute the square root of each element of the first vector \nusing vectorisation.\n\n6. Create a character vector containing then strings `\"Number_1\"` to \n`\"Number_5\"`. Use suitable helper functions to create this vector quickly.\n\n# Exercise 2: Basic object types II\n\nConsider the following vector:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nex_2_vec <- c(1, \"2\", FALSE)\n```\n:::\n\n\n\n1. What is the type of this vector? Why?\n\n2. What happens if you coerce this vector into type integer? Why?\n\n3. What does `sum(is.na(x))` tell you about a vector `x`? What is happening here?\n\n4. Is it a good idea to use `as.integer()` on double characters to round them to \nthe next integer? Why (not)? What other ways are there to do the rounding?\n\n# Exercise 3: Define a function\n\nCreate functions that take a vector as input and returns:\n\n1. The last value.\n\n2. Every element except the last value and any missing values.\n\n3. Only even numbers.\n    \n> Hint: Use the operation `x %% y` to get the remainder from diving `x` by `y`, \nthe so called 'modulo y'. For even numbers, the modulo 2 is zero.\n\nApply your function to the following example vector:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nex_3_vec <- c(1, -8, 99, 3, NA, 3, -0.5)\n```\n:::\n\n\n\n# Exercise 4: Lists\n\n1. Create a list that contains three elements called `'a'`, `'b'` and `'c'`.\nThe first element should correspond to a double vector with the elements\n`1.5`, `-2.9` and `99`.\nThe second element should correspond to a character vector with the elments\n`'Hello'`, `'3'`, and `'EUF'`.\nThe third element should contain three times the entry `FALSE`.\n\n2. Transform this list into a `data.frame` and a `tibble`. Then apply `str()` to\nget information about the respective structure. How do the results differ?\n\n\n# Exercise 5: Data frames and the study semester distribution at EUF\n\nThe package `DataScienceExercises` contains a data set called `EUFstudentsemesters`,\nwhich contains information about the distribution of study semesters of \nenrolled students at the EUF in 2021. You can shortcut the data set as follows:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\neuf_semesters <- DataScienceExercises::EUFstudentsemesters\n```\n:::\n\n\n\n1. What happens if you extract the column with study semesters as a vector\nand transform it into a `double`? \n\n2. What is the average study semester of those students being in their 8th or \nearlier semester?\n\n3. How many students are in their 9th or higher study semester?\n\n4. What does `typeof(euf_semesters)` return and why?\n",
    "supporting": [
      "session05-exercises_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}