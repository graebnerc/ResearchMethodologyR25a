{
  "hash": "d91354b42483c3d2a3bd11a1858e8485",
  "result": {
    "markdown": "---\ntitle: \"Possible solutions for the recap exercises\"\nauthor: \"Claudius Gräbner-Radkowitsch\"\nformat: \n  html:\n    number-sections: true\n    table-of-contents: true\n    toc-location: right\n  pdf: \n    number-sections: true\n    table-of-contents: true\nexecute: \n  echo: true\n  warning: false\n  message: false\n---\n\n\n\n\n# Packages used\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(data.table)\n```\n:::\n\n\n\n# CO2\n\nWe first import the raw data. \nPlease make sure you use the `here`-package and adjust the relative paths\nof the following code.\n\nSince many of the column headers were numbers (a.k.a. years), we need to \nmake explicit that these are not values but header names. We do so by seeting \nthe optional argument `header = TRUE`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nco2_data_raw <- fread(\"co2_raw.csv\", header = TRUE) \n```\n:::\n\n\n\nAfter inspecting the data using functions such as `str()`, `unique()` or\n`head()`, we first remove colums we obviously do not need and that might be\nirritating:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nco2_data_tidy_1 <- co2_data_raw %>% \n  select(-c(\n    \"Indicator Name\", \"Indicator Code\", \n    # unique() tells you there is only one indicator\n    \"Country Code\", # Not needed\n    \"V69\" # Sometimes such erroneous columns are part of what you download\n  ))\n```\n:::\n\n\n\nWe then move the year columns into rows by using `tidyr::pivot_longer()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nco2_data_tidy_2 <- co2_data_tidy_1 %>% \n  tidyr::pivot_longer(\n    cols = -\"Country Name\", \n    names_to = \"year\", \n    values_to = \"co2_percap\") \nhead(co2_data_tidy_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n  `Country Name` year  co2_percap\n  <chr>          <chr>      <dbl>\n1 Aruba          1960          NA\n2 Aruba          1961          NA\n3 Aruba          1962          NA\n4 Aruba          1963          NA\n5 Aruba          1964          NA\n6 Aruba          1965          NA\n```\n:::\n:::\n\n\n\nWe see that the year column is still a `character`. So me transform it into\na `double` to then filter the years. \nWe can also filter for the required countries within the same function call\nand then rename the column:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nco2_data_tidy_3 <- co2_data_tidy_2 %>% \n  mutate(year = as.double(year)) %>% \n  filter(\n    year >= 2000, year<=2020, \n    `Country Name` %in% c(\n      \"South Africa\", \"United States\", \"Sub-Saharan Africa\", \n      \"European Union\", \"Germany\", \"China\")\n  ) %>% \n  rename(country = `Country Name`)\n```\n:::\n\n\n\nWe could have done everything in one call as well:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nco2_data_tidy <- co2_data_raw %>% \n  select(-c(\n    \"Indicator Name\", \"Indicator Code\", \n    # unique() tells you there is only one indicator\n    \"Country Code\", # Not needed\n    \"V69\" # Sometimes such erroneous columns are part of what you download\n  )) %>% \n  tidyr::pivot_longer(\n    cols = -\"Country Name\", \n    names_to = \"year\", \n    values_to = \"co2_percap\") %>% \n  mutate(year = as.double(year)) %>% \n  filter(\n    year >= 2000, year<=2020, \n    `Country Name` %in% c(\n      \"South Africa\", \"United States\", \"Sub-Saharan Africa\", \n      \"European Union\", \"Germany\", \"China\")\n  ) %>% \n  rename(country = `Country Name`)\n```\n:::\n\n\n\nThen think about a useful location to store the data and do something like:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfwrite(co2_data_tidy, file = here(\"data/tidy/co2_tidy.csv\"))\n```\n:::\n\n\n\n\n# Data wrangling I\n\nPlease make sure you use the `here`-package and adjust the relative paths\nof the following code:\n\nCompute, for each country, the percentage change of the spending from the\nyear 2010 to the year 2020 and save this as a variable called `perc_change`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\neduc_exercise_data_raw <- fread(\"education_income.csv\") \n\neduc_exercise_data <- educ_exercise_data_raw %>%\n  dplyr::select(-c(\"income\", \"GDPpc\")) %>% \n  dplyr::filter(year %in% c(2010, 2020)) %>% \n  tidyr::pivot_wider(\n    names_from = \"year\", \n    values_from = \"EducationSpending\"\n    ) %>% \n  dplyr::mutate(\n    perc_change = ((`2020`-`2010`)/`2010`)*100\n    ) %>% \n  dplyr::filter(!is.na(perc_change))\nhead(educ_exercise_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 4\n  iso3c `2010` `2020` perc_change\n  <chr>  <dbl>  <dbl>       <dbl>\n1 ALB     3.41   3.34       -2.07\n2 AND     2.98   2.86       -4.05\n3 AGO     3.42   2.74      -19.8 \n4 ARG     5.02   5.28        5.18\n5 ARM     3.25   2.71      -16.7 \n6 AUS     5.54   5.61        1.27\n```\n:::\n:::\n\n\n\nThen think about a useful location to store the data and do something like:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.table::fwrite(\n  x = educ_exercise_data, \n  file = here(\"data/tidy/educ_perc_change.csv\"))\n```\n:::\n\n\n\n\n# Data wrangling II\n\nWe use `educ_exercise_data_raw` as imported above as a starting point and \nproceed as follows:\n\nCompute for each income group the average expense of education\nover the whole period. Make sure missing\nvalues are ignored. \n\nSave the new data set under a useful name in an adequate location.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\neduc_exercise_summarized <- educ_exercise_data_raw %>% \n  dplyr::summarise(\n    EducExpense_avg = mean(EducationSpending, na.rm = TRUE), \n    .by = \"income\") \neduc_exercise_summarized\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               income EducExpense_avg\n1          Low income        3.342121\n2 Upper middle income        4.723520\n3 Lower middle income        4.534556\n4         High income        4.644050\n```\n:::\n:::\n\n\n\nThen think about a useful location to store the data and do something like:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.table::fwrite(\n  x = educ_exercise_summarized, \n  file = here(\"data/tidy/educ_perc_income-groups.csv\"))\n```\n:::\n\n\n# Visualization and Quarto\n\nThe quarto header should look like this:\n\n```\ntitle: \"Sessions 12 and 13: Recap and Practice\"\nauthor: \"Claudius Gräbner-Radkowitsch\"\nformat: \n  html:\n    number-sections: true\n    table-of-contents: true\n    toc-location: body\nexecute: \n  echo: false\n  warning: false\n  message: false\n```\n\n# Visualization and Quarto\n\nTo read in the data set do something as the following, but make sure you are\nusing the `here`-package and set the path accordingly.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchild_mortality <- data.table::fread(\"child_mortality.csv\")\nhead(child_mortality)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    iso3c  year ChildMortality    GDPpc\n   <char> <int>          <num>    <num>\n1:    AFG  2017           64.6 2096.093\n2:    AFG  2014           73.4 2110.830\n3:    AFG  2016           67.2 2023.835\n4:    AFG  2012           80.3 1958.448\n5:    AFG  2021           55.7 1673.144\n6:    AFG  2007          100.0 1287.064\n```\n:::\n:::\n\n\n\nTo summarize the data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchild_mortality_summarized <- child_mortality %>% \n  dplyr::summarise(\n    ChildMortality = mean(ChildMortality, na.rm = TRUE), \n    GDPpc = mean(GDPpc, na.rm = TRUE),\n    .by = \"iso3c\")\nhead(child_mortality_summarized)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  iso3c ChildMortality     GDPpc\n1   AFG      88.459091  1660.568\n2   ALB      15.031818  9437.101\n3   DZA      29.486364 11735.174\n4   ASM            NaN       NaN\n5   AND       4.718182       NaN\n6   AGO     125.831818  6029.127\n```\n:::\n:::\n\n\n\nWe can then directly create a simple scatter plot:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggplot(\n  data = child_mortality_summarized, \n  mapping = aes(x = GDPpc, y = ChildMortality)\n  ) +\n  geom_point() +\n  theme_linedraw()\n```\n\n::: {.cell-output-display}\n![](session12-solutions_files/figure-pdf/unnamed-chunk-14-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nWe see a clear non-linear relationship. \n\nWe now plot the data in logarithms. You can do this by changing the \nunderlying data, rescale an axis, or make the change directly in the\n`data` argument of `ggplot2::ggplot()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggplot(\n  data = child_mortality_summarized, \n  mapping = aes(x = log(GDPpc), y = log(ChildMortality))\n  ) +\n  geom_point() +\n  theme_linedraw()\n```\n\n::: {.cell-output-display}\n![](session12-solutions_files/figure-pdf/unnamed-chunk-15-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nThe relationship now becomes almost linear. This is typical for relationships\nthat are exponential. We can say: an increase in GDP per capita by one percent\nis on average associated with a reduction of child mortality by 0.83 per cent\n(the latter value is given by a regression, but we come to this later).",
    "supporting": [
      "session12-solutions_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}