{
  "hash": "e00e1dd1c37bf644d6e5e0dd40720627",
  "result": {
    "markdown": "---\ntitle: \"Estimating average height of EUF students - a MCS\"\nsubtitle: \"Solution to the exercise\"\ndate: \"2024-06-15\"\ndate-modified: last-modified\nformat: \n    html: \n        highlight-style: github\n        number-sections: true\n    pdf: \n        toc: false\n        number-sections: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble)\nlibrary(ggplot2)\n```\n:::\n\n\n\n**Task:**\n\n> Suppose you are interested in the average height of the students at the European University Flensburg and you are wondering what a good sample size would be.\nSuppose further that the data set `DataScienceExercises::EUFstudents` contains the \nresult of a census of EUF students.\nStudy the process of sampling by carrying an MCS in which you draw random \nsamples of size `10` and `50` from this population.\nTo do this, conduct an MCS with `1000` repetitions and check what difference \nit makes to increase the sample size.\n\nFirst, make sure you understand which steps are necessary to solve this task.\nHere, you need to:\n\n1. Read in and understand the data set `DataScienceExercises::EUFstudents`\n2. Draw a random sample from this data set and compute the average height\nof students in this sample\n3. Design a MCS in which this draw is executed 1000 times for two different \nsample sizes\n4. Analyze the results by studying the mean and variance of the estimates.\n\nOnce you have set up such a plan you can proceed step-by-step.\n\n# Read in and understand the data set\n\nIt is always a good idea to have a shortcut to your data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudent_data <- DataScienceExercises::EUFstudents\n```\n:::\n\n\n\nThen, inspect the data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(student_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 2\n  Gender Height\n  <chr>   <dbl>\n1 female   159.\n2 female   161.\n3 female   173.\n4 female   163.\n5 female   164.\n6 female   174.\n```\n:::\n:::\n\n\n\nWe see that there are two columns. For the purpose of this task, only the\ncolumn `Height` is relevant.\n\n# Draw and analyze a random sample from this data set\n\nTo draw a random sample of size `10`, we can use the function `sample()` as \nfollows:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(x = student_data[[\"Height\"]], size = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 175.4042 161.9121 151.9890 149.6424 168.1513 160.9433 157.9966 163.7599\n [9] 182.6694 164.6025\n```\n:::\n:::\n\n\n\nNote that `sample()` takes as input an atomic vector. Thus, you need to extract\nthe column `Height` as a vector from the underlying data set before drawing the\nsample! \n\nBut since we are interested in the average height of the students (our\n*population parameter* of interest), we need to compute this parameter\nalso for our sample:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(sample(x = student_data[[\"Height\"]], size = 10))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 166.6349\n```\n:::\n:::\n\n\n\nWe now need to embed this process into a MCS!\n\n# Design a MCS\n\nAlthough we need to run our MCS for `1000` times, it is a good idea to \nfirst design it using fewer iteration. In any case, we should follow the\nstandard procedure of developing an MCS.\n\nFirst, create an output container with as many `NA`s as we will have repetitions.\nNote that since we collect two kinds of results - one for sample size 10, one for\nsample size 50 - we need two containers:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_repetitions <- 5 # Start with 5 iterations\noutput_container_n10 <- rep(NA, n_repetitions)\noutput_container_n50 <- rep(NA, n_repetitions)\noutput_container_n10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA NA NA NA NA\n```\n:::\n:::\n\n\n\nSecond, think about the looping sequence. In our case, we want to repeat the MCS\nfor `n_repetitions` times, so the looping sequence becomes:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in seq_len(n_repetitions))\n```\n:::\n\n\n\nThird, add the action body. Here we use the code to draw a sample from above\nand just integrate it into the loop:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in seq_len(n_repetitions)){\n  output_container_n10[i] <- mean(sample(\n    x = student_data[[\"Height\"]], size = 10))\n\n    output_container_n50[i] <- mean(sample(\n    x = student_data[[\"Height\"]], size = 50))\n}\n```\n:::\n\n\n\nFinally, to make our results fully reproducible despite involving random\nprocesses, we use the function `set.seed()`.\n\nIn all, this leads to the following code:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_repetitions <- 5 # Start with 5 iterations\noutput_container_n10 <- rep(NA, n_repetitions)\noutput_container_n50 <- rep(NA, n_repetitions)\n\nset.seed(123)\nfor (i in seq_len(n_repetitions)){\n  output_container_n10[i] <- mean(sample(\n    x = student_data[[\"Height\"]], size = 10))\n\n    output_container_n50[i] <- mean(sample(\n    x = student_data[[\"Height\"]], size = 50))\n}\n```\n:::\n\n\n\nWe can test this by running the code and inspect the output container:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noutput_container_n10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 166.1539 163.8509 167.5664 168.1203 167.5359\n```\n:::\n:::\n\n\n\nOkay, this makes sense. So now we can set `n_repetitions` to `1000` and \nrun the MCS as desired.\n\n\n4. Analyze the results by studying the mean and variance of the estimates\n\nTo compare the results, we now look at the resulting sampling distributions.\nWe can do so visually, but for the task at hand, just computing the mean\nand standard deviation is sufficient:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_repetitions <- 1000\noutput_container_n10 <- rep(NA, n_repetitions)\noutput_container_n50 <- rep(NA, n_repetitions)\n\nset.seed(123)\nfor (i in seq_len(n_repetitions)){\n  output_container_n10[i] <- mean(sample(\n    x = student_data[[\"Height\"]], size = 10))\n\n    output_container_n50[i] <- mean(sample(\n    x = student_data[[\"Height\"]], size = 50))\n}\n\nmean_10 <- mean(output_container_n10)\nmean_50 <- mean(output_container_n50)\nsd_10 <- sd(output_container_n10)\nsd_50 <- sd(output_container_n50)\n\ntibble::tribble(\n  ~`Sample size`, ~Mean, ~Variation,\n  #--|--|----\n  10, mean_10, sd_10,\n  50, mean_50, sd_50\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 x 3\n  `Sample size`  Mean Variation\n          <dbl> <dbl>     <dbl>\n1            10  167.      2.77\n2            50  167.      1.23\n```\n:::\n:::\n\n\n\nWe see that the mean is very similar, meaning that on average both sample sizes\nare equivalent. But we also see that the larger sample shows much less variation\nand the estimates from the single samples are more concentrated around the \ntrue value. Thus, having larger samples makes our estimations more precise!\n\n# Addendum: Visualizing the results\n\nIf you wanted to visualize the results, you could proceed as follows.\nFirst, because `ggplot()` requires tibbles as input, you first need to put \nyour results into a tibble:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult_tibble <- tibble::tibble(\n  \"sample_mean\" = c(output_container_n10, output_container_n50),\n  \"sample_size\" = c(rep(10, length(output_container_n10)), \n                    rep(50, length(output_container_n50)))\n)\nhead(result_tibble)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 2\n  sample_mean sample_size\n        <dbl>       <dbl>\n1        166.          10\n2        164.          10\n3        168.          10\n4        168.          10\n5        168.          10\n6        169.          10\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsampling_plot <- ggplot(data = result_tibble, aes(x=sample_mean)) +\n  geom_histogram(alpha=0.5, color=\"#00395B\", fill=\"#00395B\", binwidth = 0.5) +\n  scale_y_continuous(expand = expansion(add = c(0, 10))) +\n  facet_wrap(~sample_size, nrow = 2) +\n  labs(\n    x = \"Sample means\", \n    y = \"Count\", \n    title = \"The sampling distributions\") +\n  theme_linedraw()\nsampling_plot\n```\n\n::: {.cell-output-display}\n![](session15-solution-eufstudents_files/figure-pdf/unnamed-chunk-13-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nHere, the similar mean but very different variance become apparent!",
    "supporting": [
      "session15-solution-eufstudents_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}