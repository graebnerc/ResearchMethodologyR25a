{
  "hash": "246a03b6988ecd4cc820a31c0cac369b",
  "result": {
    "markdown": "---\ntitle: \"Fundamental object types in R I: Functions\" # Also check out line 43\nauthor: Claudius Gräbner-Radkowitsch\ndate: '2024-03-28'\ndocumentclass: scrartcl\nformat: \n  html:\n    theme: readable\n    highlight: tango\n    toc: true\n    toc_depth: 2\n    number_sections: true\n  pdf:\n    papersize: a4\n    toc: true\n    toc-depth: 2\n    number-sections: true\n    include-in-header: \n      text: |\n        \\usepackage{lmodern} \n        \\usepackage{graphicx}\n        \\usepackage{hyperref}\n        \\usepackage{url}                \n        \\usepackage{xcolor}\n        \\usepackage{booktabs}\n        \\usepackage{listings}\n        \\lstloadlanguages{R}\n        \n        \\definecolor{eufblue}{RGB}{0,57,91}\n        \\definecolor{eufgrey}{RGB}{111,111,111}\n        \\definecolor{euflightblue}{RGB}{105,170,205}\n        \n        \\hypersetup{\n        pdfauthor={Claudius Graebner-Radkowitsch}\n        colorlinks=true,\n        linkcolor=euflightblue,\n        urlcolor=euflightblue\n        }\n        \\usepackage[includehead,includefoot,top=2cm, bottom=1.5cm]{geometry}\n        \\usepackage[headsepline, footsepline]{scrlayer-scrpage}\n        \\pagestyle{scrheadings}\n        \\clearpairofpagestyles\n        \\ihead{Tutorial: Functions}\n        %\\chead{Kopfzeile Mitte}\n        \\ohead{\\pagemark} %\n        \\ifoot{}\n        \\cfoot{\\href{https://euf-datascience-spring24.netlify.app/}{\\normalfont\\color{eufblue}{Data Science Using R - Spring Semester 2024}}} % Fußzeile Mitte\n        \\ofoot{} \n        \\setkomafont{disposition}{\\color{eufblue}\\bfseries}\n---\n\n\n\n\n# Overview\n\nWe already learned that everything in `R` that exists is an *object*.\nYou most likely already noted that there are different types of objects:\n`2`, for instance, was a number, but `assign` was a function.^[In fact, \nwe will learn below that `2` is not really a number, but a vector\nor length 1. Only in a next step, `2` counts as a 'number', or, more precisely\nas a 'double'.]\nAs you might have guessed, there are many more types of objects. \nTo understand the fundamental object types in `R` is an essential prerequisite\nto master more complicated programming challenges than those we have encountered\nso far. Thus, this post is among those that will introduce you to the most \nimportant object types that you will encounter in `R`. \n\nThese data types are summarized in the following figure:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](vector-classification.pdf)\n:::\n:::\n\n\n\nThis post will be about functions. Different types of vectors are covered in \nthe upcoming posts.\n\n# Functions\n\nFunctions are algorithms that apply a certain routine on an *input*, thereby\nproducing (almost always) an *output*.\nThe function `log()`, for instance, takes as input a number and returns as output\nanother number, namely the logarithm of the input:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6931472\n```\n:::\n:::\n\n\n\n**Calling a function**\n\nThere are, in principle, four different ways to call a function in `R`.\nOnly two of them, however, are practically relevant for our purposes.\n\nThe by far most important variant is the so called *prefix form*. \nHere you first write down the name of the function.\nThen you open brackets, write down all the *arguments* of the function, which\nyou separate by commas, and then you close the brackets.\nIn the following example, the name of the function is `assign`, and its \narguments are `\"test\"` and `2`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nassign(\"test\", 2)\n```\n:::\n\n\n\nThe second relevant way to call a function is the so called *infix form*.\nHere, the name of the function is written *between* the arguments of the \nfunction. This form is less common than the *prefix form*, but frequently used\nfor mathematical operations, such as `+`, `-` or `/`.\n\nStrictly speaking, it is only a shortcut, since every function call using the \ninfix form can also be written as a function call in the prefix form:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n`+`(2,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\n\nBoth function calls are, in the end, equivalent, but in this context the \ninfix form is clearly easier to read.\n\n**The arguments of a function**\n\nThe arguments of a function usually provide the *input* of the function, and\nmight also specify how the underlying routine should be executed exactly.\n\nThe function `sum`, for instance, takes as arguments an arbitrary number of\nnumbers (its 'input') and returns the sum of these numbers:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(1,2,3,4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\n\nMoreover, `sum()` also accepts an *optional argument*, which is called\n`na.rm`. This optional argument can take the value \n`TRUE` or `FALSE`. The letters `na` stand for \"not available\", and refer to\nmissing values. If we do not set the optional argument explicitly, it takes its\ndefault value. In this case, the defaults value is `FALSE`. You can get this \ninformation by calling the help-function: `help(sum)`.\n\nOptional arguments are no input in the classical sense, but they allow you to\ncontrol the routine that the function applies. In the present case this means \nthat if `na.rm` takes the value `TRUE`, all missing values in the input to \n`sum()` will be ignored: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(1,2,3,4,NA) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(1,2,3,4,NA, na.rm = TRUE) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\n\nIf you want to know what arguments you can give to a function, you should \ncall the function `help()` to have a look at the function documentation. In \ncase of `sum()` we learn that in addition to its input, `sum()` accepts one\nadditional argument, `na.rm`, which by default takes the value `FALSE`\n\nTo change optional arguments, we always need to (or better: should) specify the\nname of the optional argument. For the standard input this is not necessary, but\nsometimes still useful. Information about the names of the input, as well as the\noptional arguments, can always be obtained via the function `help()`.\n\n\n**Define your own functions**\n\nDefining functions on our own is incredibly useful. We can do this by using the \nkeyword `function`. To illustrate how to define our own functions, we will now\ndefine a function that we will call `pythagoras` and that takes as arguments the\nlength of the two catheti of a right triangle. It then calculates the length \nof the hypotenuse using\nthe [Pythagorean theorem](https://en.wikipedia.org/wiki/Pythagorean_theorem).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npythagoras <- function(cathetus_1, cathetus_2){\n  hypo_squared <- cathetus_1**2 + cathetus_2**2\n  hypotenuse <- sqrt(hypo_squared) # sqrt() takes square root\n  return(hypotenuse)\n}\n```\n:::\n\n\n\nWe always define a new function by using the function `function()`.\nWe start our definition by associating the new function with a name \n(here: 'pythagoras') so that we can use it later.\n\nThe argumtents to `function()` are then arguments that our new function should\naccept. In the present case there are two such arguments: `cathetus_1` and \n`cathetus_2`. \nAfter that comes the so called 'function body'. It contains all the routines\nthat the function should execute when called. The function body is always \nenclosed by curly brackets.\nIn the example above we first compute the sum of the squares of the two \ncatheti, and save this intermediate result as `hypo_squared`.\nThis is the part of the Pythagorean theorem that you might know as\n$c^2 = a^2 + b^2$.\nSince we are interested in the 'normal' length of the hypotenuse,\nwe then use the function `sqrt()` to get the square root of `hypo_squared`.\nThis is also the value that we wish our function would return to us. To make \nthis explicit, we use the keyword `return` to specify the return value of the\nfunction.^[Using `return` is, strictly speaking, not necessary, but I always\nuse it for the sake of readability and transparency. An interesting debate\nabout whether you should use `return` or not can be found \n[here](https://stackoverflow.com/questions/11738823/explicitly-calling-return-in-a-function-or-not).]\n\nIf we now call our function with the correct arguments, the routine above will\nbe executed:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npythagoras(2, 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.472136\n```\n:::\n:::\n\n\n\n> **Note**: we could also call the arguments of our new function explicitly, \nwhich can be useful for transparency reasons when you call more complex functions:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npythagoras(cathetus_1=2, cathetus_2=4) # Also works the other way around\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.472136\n```\n:::\n:::\n\n\n\n> **Note**: you can see the source code of a function (frequently) by typing the \nname of the function withough the brackets:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npythagoras\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction(cathetus_1, cathetus_2){\n  hypo_squared <- cathetus_1**2 + cathetus_2**2\n  hypotenuse <- sqrt(hypo_squared) # sqrt() takes square root\n  return(hypotenuse)\n}\n<bytecode: 0x7fe34d795528>\n```\n:::\n:::\n\n\n\nNote that all object names used within the function body are lost after the \nfunction has been called. The deeper reason is that functions have their own\n[environment](https://adv-r.hadley.nz/environments.html).\nBecause of this behavior, `R` produces an error in the following example, in which\n`hypo_squared` exists *only* within the function body.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npythagoras <- function(cathetus_1, cathetus_2){\n  hypo_squared <- cathetus_1**2 + cathetus_2**2\n  hypotenuse <- sqrt(hypo_squared) # sqrt() takes square root\n  return(hypotenuse)\n}\nx <- pythagoras(2, 4)\nhypo_squared\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'hypo_squared' not found\n```\n:::\n:::\n\n\n\nNote that this behavior is intentional: otherwise, there would quickly be a lot\nof associations that are hard to keep track of. It is, however, of utmost \nimportance to always remember this behavior, otherwise, very confusing errors\nmight emerge, as in the following example in which you might have expected \n`hypo_squared` to take the value of the length of the hypotenuse squared \nwithin your right triangle:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhypo_squared <- 120\nx <- pythagoras(2, 4)\nhypo_squared\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 120\n```\n:::\n:::\n\n\n\nIt is always a good idea to **document** your own functions. This is not only\n(but especially) the case if you want to share it with others: also, if you\nwant to use your function after a while has past, you will be extremely grateful\nto your previous You for explaining to you how the function works and what \narguments it takes. Or, in other words, nothing is more frustrating than getting\nback to your code after a few weeks and being forced to invest many\nhours to encypher what you have written previously.^[Or, as the well-known\n`R` developer Hadley Wickham puts it: \"You are always coorpering with at least\none other person: future-you.\"] \n\nWhile you can document functions using simple comments at the end of each line\nI strongly recommend to get used to follow \n[these conventions](https://r-pkgs.org/man.html#man-functions)\nright from the start. \nDocumenting our little function from above would look like this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Computes the length of the hypothenuse in a right triangle\n#' \n#' This function takes the length of the two catheti of a right triangle as\n#'  arguments and computes the length of the hypothenuse.\n#' @param cathetus_1 The length of the first cathetus\n#' @param cathetus_2 The length of the second cathetus\n#' @return The length of the hypothenuse of the right triangle as defined by \n#'  `cathetus_1` and `cathetus_2`.\npythagoras <- function(cathetus_1, cathetus_2){\n  hypo_squared <- cathetus_1**2 + cathetus_2**2\n  hypotenuse <- sqrt(hypo_squared) # sqrt() takes square root\n  return(hypotenuse)\n}\n```\n:::\n\n\n\nThe documentation of a function must come immediately before the function \ndefinition and each line of the documentation starts with `#'`. \nIn the first line you provide a title, which must not be longer \nthan 80 characters. \n\nThen, after inserting a blank line you describe what the function does in a\nbit more detail. Then, you describe each argument by using the decorator \n`@param` at the beginning of the lines. \nFinally, you describe the output of the function\nafter starting the line with the decorator `@return`.\n\nThus, any documentation of a function should at least include the arguments and\nthe kind of output. \n\n**Why you should use functions in the first place**\n\nDefining your own functions is extremely helpful in practice. It is recommended\nto enclose routines that you use several times into a function. There are \nseveral reasons for doing so:\n\n1. **Code becomes more concise and transparent** It is easier to document code\nthat uses functions because of the documentation conventions introduced above.\nMoreover, the code becomes shorter and easier to read. As a rule of thumb, after\npasting and slightly adjusting some of your code twice, consider turning it\ninto a function.\n\n2. **Functions help to structure your code** Functions summarize, on a higher \nlevel of abstraction, your idea of how to solve a certain problem. Because you\ndo not want to think about how to do this every time you encounter the same \nproblem, it is better to summarize your thoughts in one place - the function.\n\n3. **Functions facilitate debugging** Imagine you encounter a mistake in your\nimplementation of a routine in your code. If this routine is used ten times in\nyour code and you did not use functions, you would need to correct your mistake \nten times.\nIf you had used a function, you would have to correct the mistake only once. \nNeedless to\nsay that functions reduce the likelihood for a mistake by providing you with the\nincentive to document the code, and because they avoid incidental mistakes\nthat will always happen if you write the same code many times in different\nplaces.\n\nWhile these three reasons should already suffice to convince you of using \nfunctions whenever possible, there are even more reasons to use them.\nMany of them are related to the fundamental programming principle\n[DRY](https://en.wikipedia.org/wiki/Don%E2%80%99t_repeat_yourself) \n(\"Don't Repeat Yourself\").\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}