{
  "hash": "4f9b1b90721f0533db5c90a09218446c",
  "result": {
    "markdown": "---\ntitle: Visualization # Also check out line 43\nauthor: Claudius Gräbner-Radkowitsch\ndate: '2024-04-19'\ndocumentclass: scrartcl\nexecute: \n  freeze: auto\nformat: \n  html:\n    theme: readable\n    highlight: tango\n    toc: true\n    toc_depth: 2\n    number_sections: true\n  pdf:\n    papersize: a4\n    toc: true\n    toc-depth: 2\n    number-sections: true\n    include-in-header: \n      text: |\n        \\usepackage{lmodern} \n        \\usepackage{graphicx}\n        \\usepackage{hyperref}\n        \\usepackage{url}                \n        \\usepackage{xcolor}\n        \\usepackage{booktabs}\n        \\usepackage{listings}\n        \\lstloadlanguages{R}\n        \n        \\definecolor{eufblue}{RGB}{0,57,91}\n        \\definecolor{eufgrey}{RGB}{111,111,111}\n        \\definecolor{euflightblue}{RGB}{105,170,205}\n        \n        \\hypersetup{\n        pdfauthor={Claudius Graebner-Radkowitsch}\n        colorlinks=true,\n        linkcolor=euflightblue,\n        urlcolor=euflightblue\n        }\n        \\usepackage[includehead,includefoot,top=2cm, bottom=1.5cm]{geometry}\n        \\usepackage[headsepline, footsepline]{scrlayer-scrpage}\n        \\pagestyle{scrheadings}\n        \\clearpairofpagestyles\n        \\ihead{Tutorial: Visualization}\n        %\\chead{Kopfzeile Mitte}\n        \\ohead{\\pagemark} %\n        \\ifoot{}\n        \\cfoot{\\href{https://euf-datascience-spring24.netlify.app/}{\\normalfont\\color{eufblue}{Data Science Using R - Spring Semester 2024}}} % Fußzeile Mitte\n        \\ofoot{} \n        \\setkomafont{disposition}{\\color{eufblue}\\bfseries}\n---\n\n\n\n# Packages used\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DataScienceExercises)\nlibrary(ggplot2)\n```\n:::\n\n\n\n# Developing a ggplot - the general workflow\n\nMake a shortcut to the data and inspect it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_data <- DataScienceExercises::gdplifexp2007\nhead(gdp_data, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        country continent lifeExp        pop gdpPercap\n1         China      Asia  72.961 1318683096  4959.115\n2         India      Asia  64.698 1110396331  2452.210\n3 United States  Americas  78.242  301139947 42951.653\n```\n:::\n:::\n\n\nPlots in `ggplot2` are created layer by layer. \nWe now go through each step that, in the end, will produce the following \nplot:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nWe start by creating the basic `ggplot2` object, which is best thought of as \na fancy list. To this end we use the function `ggplot2::ggplot()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_plot <- ggplot2::ggplot()\ntypeof(gdp_plot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n:::\n\n\nWhen we call this list, the plot described by it gets rendered:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nOf, course, there is no plot since the list is basically empty. \nAll the specifications in the `ggplot2::ggplot()` function are best thought\nof as default values. In our case we fist specify the data set we use for\nour plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_plot <- ggplot2::ggplot(\n  data = gdp_data\n)\n```\n:::\n\n\nBut this alone does not do anything good.\nWe also need to inform `ggplot2` on how it should map the variables from\nthe data set onto the plot. In a first step, lets clarify that the variable\n`gdpPercap` should be mapped on the x-axis and the variable `lifeExp` on the\ny-axis. \n\nThis is done via the argument `mapping` and the function \n`ggplot2::aes()`, which takes as arguments the aesthetics of the plot and the \nvariable names that should be plotted on them:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_plot <- ggplot2::ggplot(\n  data = gdp_data, \n  mapping = ggplot2::aes(\n    x = gdpPercap,\n    y = lifeExp\n  )\n)\ngdp_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nThis looks better. Note that `ggplot2` chooses a default range for the axes\nbased on the range of the variables in the underlying data set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmin(gdp_data$lifeExp); max(gdp_data$lifeExp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 39.613\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 82.603\n```\n:::\n\n```{.r .cell-code}\nmin(gdp_data$gdpPercap); max(gdp_data$gdpPercap)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 277.5519\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 49357.19\n```\n:::\n:::\n\n\nWe now want to add an additional layer with data points on our plot.\nPoits are so called `geom`: a certain geometrical object representing data\npoints. The function to add points is called `ggplot2::geom_point()` amd \nwe literally just add it to our plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_plot <- gdp_plot + geom_point()\ngdp_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nThis already reveals much of the general workflow involved in creating a \nplot: define a raw object and add and refine layers. \nLooking at the plot above, one thing that is missing is that the dots are \nfilled in different colors, representing the continents of the countries, \nand the size of the dots represent the population size of the countries.\n\nTo achieve this we need to map the variable `continent` from the data set\nto the aesthetic `color` in the plot, and the variable `pop` to the aesthetic\n`size`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_plot <- ggplot2::ggplot(\n  data = gdp_data, \n  mapping = ggplot2::aes(\n    x = gdpPercap,\n    y = lifeExp,\n    size = pop, \n    color = continent\n    )\n  ) +\n  ggplot2::geom_point()\ngdp_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nWhat is not so nice is that the points are partly overlapping and bigger \npoints might conceal smaller points below them. To address this problem we might\nmake the plots a bit transparent. Since this is not a mapping from a variable\nfrom the data set to an aesthetic, but a general setting that should apply to\nall points equally, we do not specify it via the argument `aes`, but via the \nparameter responsible for transparency directly. This parameter is called\n`alpha` and we can set it for the affected geom directly:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_plot <- ggplot2::ggplot(\n  data = gdp_data, \n  mapping = ggplot2::aes(\n    x = gdpPercap,\n    y = lifeExp,\n    size = pop, \n    color = continent\n    )\n  ) +\n  ggplot2::geom_point(alpha=0.5)\ngdp_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nBut now there is the danger for points to 'melt into each other'. Better \nhave their circle in black, and only color their interior. We can do so by\nreplacing `color` in the aesthetics with `fill`, and set the color explicitly\nto `'black'`. However, this distinction between circle color and fill color\nis not available for all kind of point shapes. You need to search the internet\nfor a shape that supports this distinction. If you looked, for instance,\n[here](https://r-graphics.org/recipe-scatter-shapes#discussion-28)\nyou found that they shape with index 21 allows this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_plot <- ggplot2::ggplot(\n  data = gdp_data, \n  mapping = ggplot2::aes(\n    x = gdpPercap,\n    y = lifeExp,\n    size = pop, \n    fill = continent\n    )\n  ) +\n  ggplot2::geom_point(\n    shape=21, color=\"black\", alpha=0.5)\ngdp_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nProgress cannot be denied! \nNow lets fix the labels and annotations of the plot. Here, the function\n`ggplot2::labs()` comes in handy. It accepts arguments such as `title`, \n`subtitle`, `captio`, and several more. The `help()` function gives further \ninformation about the possibilities.\n\nIn our case we want to add a `title`, specify the `x` and `y` axis, and add\na `caption`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_plot <- gdp_plot +\n  ggplot2::labs(\n    title = \"Life expectancy and income per capita\", \n    caption = \"Note: size of bubbles represents population. Data: Gapminder\",\n    x = \"GDP per capita (int. Dollar)\",\n    y = \"Life expectancy in years\"\n  )\ngdp_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nSo far, so good. The `x`-axis is a bit clumsy, though. It would be better\nto scale the number down so that it shows 1000 dollars. The scale properties of \nthe axes can be defined by the functions `scale_*_**()`, where the first \n`*` should be replaced by the aesthetic we want to adjust, and the second by \na keyword indicating whether the variable is discrete or continuous, or whether\nwe want to provide fully manual specifications. In our case we are interested \nin changing the `x`-axis, which represents a continuous variable (GDP).\nThus we call `scale_x_continuous()`. Since we want to change the labels on the\naxis we specify the argument `labels`. To scale the labels we make use of a\nfunction from the `scales`-package: `scales::number_format()`.\nAnd to make this clear on the axis we add the suffix 'k':\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_plot <- gdp_plot +\n  ggplot2::scale_x_continuous(\n    labels = scales::number_format(scale = 0.001, suffix = \"k\")\n    )\ngdp_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nNow lets turn to the legends. First of all we want to remove the legend\nfor the bubble size since, first, the mapping of the bubble size is not \nstraightforward to understand and, second, we already \nindicated that the bubble size represents population in the \ncaption of the plot.\nThere are several ways to to this: either we use the `scale_*_*()` function\nwe already encountered with the argument `guide=\"none\"`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_plot + ggplot2::scale_size_continuous(guide = \"none\")\n```\n:::\n\n\nOr we use a function that allows us to specify all kinds of legend properties:\n`ggplot2::guides()`. Here we take the aesthetic name as an argument and set it to \n´\"none\"`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_plot <- gdp_plot + ggplot2::guides(size = \"none\")\ngdp_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nThe advantage of using `ggplot2::scale_size_continuous()` would be that we \ncould strech the limits a bit to make the differences more straightforward to\nsee:\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_plot <- gdp_plot + \n  ggplot2::scale_size_continuous(\n    guide = \"none\", \n    range = c(0.1, 24)\n    )\n```\n:::\n\n\n\nNow we want to put the remaining legend to the bottom of the plot. \nAgain, there are several ways to achieve this, but for such specific changes\nthe function `ggplot2::theme()` is usually a good option. \nIt allows us to change almost everything on a plot. The argument\nto place legends at the bottom is `legend.position` and already hints at the \ninternal logic of `theme()`, which you might explore through the `help()` \nfunction yourself:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_plot <- gdp_plot +\n  ggplot2::theme(legend.position = \"bottom\")\ngdp_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nSince the `theme()` function is so extensive there are also many pre-defined\nthemes for plots, which are best explored in the internet. A good default one\nis the black-and-white theme, which we can use via `ggplot2::theme_bw()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_plot <- gdp_plot +\n  ggplot2::theme_bw()\ngdp_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nOups, while everything looks nicer, some of our previous changes, such as moving\nthe legend to the bottom and removing its title were overwritten!\nIt, thus, makes always sense to first call the default theme, and *then* make\nfurther changes via `ggplot::theme()`.\n\nOf course, we can then also make further adjustments to the theme, e.g. \nby removing the panel of the plot. \nRemoving elements of the plot via `ggplot2::theme()` requires us to set these\nelements via the function `ggplot2::element_blank()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_plot <- gdp_plot +\n  ggplot2::theme_bw() +\n  theme(\n    legend.position = \"bottom\",\n    panel.border = ggplot2::element_blank()\n  )\ngdp_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\nHm, but it would indeed be a bit nicer to keep the axis lines of the `x`- and\n`y`-axis. Lets do this by specifying them explicitly via \n`ggplot2::element_line()`, which again allows for endless specification details:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_plot <- gdp_plot +\n  ggplot2::theme(\n    axis.line = ggplot2::element_line(colour = \"grey\"))\ngdp_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nIts time to get picky! The ticks of the values should have the same color as \nthe axis lines!!!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_plot <- gdp_plot +\n  ggplot2::theme(\n    axis.ticks = ggplot2::element_line(colour = \"grey\"))\ngdp_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\nOkay, you should get the general idea. What is more worrisome, to be honest, is\nthe ugly title of the legend. Away with it!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_plot <- gdp_plot +\n  ggplot2::theme(legend.title = ggplot2::element_blank())\ngdp_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nSo, the only thing that distinguishes our plot from the initial example is \nthe color pallette. There are many different pallettes available, you can \nsearch for your favorite one in the internet. Here we use one provided by \nthe package `RColorBrewer`, which can be used for the `fill`-aesthetic \ndireclty:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_plot <- gdp_plot +\n  ggplot2::scale_fill_brewer(palette = \"Dark2\")\ngdp_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nThats it! This was, of course, only a tiny glimpse on what you can achieve\nusing `ggplot2`, but it should suffice for the start. Moreover, what is more\nimportant, you learned about the general workflow when developing a plot:\nstart with creating a list with ´ggplot2::ggplot()` and then adjust your plot\nlayer by layer until you are satisfied. \n\nHere is the whole code we used for the figure:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_plot <- ggplot2::ggplot(\n  data = gdp_data, \n  mapping = ggplot2::aes(\n    x = gdpPercap,\n    y = lifeExp,\n    size = pop, \n    fill = continent\n  )\n) +\n  ggplot2::geom_point(\n    shape=21, color=\"black\", alpha=0.5) +\n  ggplot2::labs(\n    title = \"Life expectancy and income per capita\", \n    caption = \"Note: size of bubbles represents population. Data: Gapminder\",\n    x = \"GDP per capita (int. Dollar)\",\n    y = \"Life expectancy in years\"\n  ) +\n  ggplot2::scale_x_continuous(\n    labels = scales::number_format(scale = 0.001, suffix = \"k\")\n  ) + \n  ggplot2::scale_size_continuous(\n    guide = \"none\", \n    range = c(0.1, 24)\n  ) +\n  ggplot2::scale_fill_brewer(\n    palette = \"Dark2\"\n    ) +\n  ggplot2::theme_bw() +\n  ggplot2::theme(\n    legend.position = \"bottom\",\n    legend.title = ggplot2::element_blank(),\n    panel.border = ggplot2::element_blank(),\n    axis.line = ggplot2::element_line(colour = \"grey\"),\n    axis.ticks = ggplot2::element_line(colour = \"grey\")\n  )\n```\n:::\n\n\n\nOf course, for simple exploratory \nanalysis, you do not need so many details as we just did, but for publication\npurposes its good to know how far you can get!\n\nAnother great thing is that the syntax remains largely the same, no matter \nwhether you want to make a scatter plot as above, or a line graph or a histogram.\nAll that changes is the particular `geom_*()` function used. \n\n# An alternativ line plot\n\nTo illustrate the similarities of the code used for a different plot type, we\nwill now use a data set that is very similar to the one used previously, only\nthis time we have observations for GDP per capita and life expectancy for\nseveral years, aggregated for the different continents. The data set is \ngain made available via the package `DataScienceExercises`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_data_agg <- DataScienceExercises::aggGDPlifexp\n```\n:::\n\n\nAgain, we first inspect the data to get a feeling about the \nvariables that are present:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(gdp_data_agg, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n  continent  year lifeExp      pop gdpPercap\n  <fct>     <int>   <dbl>    <dbl>     <dbl>\n1 Africa     1952    39.1 4570010.     1253.\n2 Africa     1957    41.3 5093033.     1385.\n3 Africa     1962    43.3 5702247.     1598.\n```\n:::\n:::\n\n\nLets plot the dynamics of GDP per capita over time for the different continents.\nWe can now simply copy-paste a lot of the code we have used before. Lets \nstart with the uncontroversial beginning and just replace the name of the \ndata set and the variable names:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_dyn_plot <- ggplot2::ggplot(\n  data = gdp_data_agg, # <- Replaced \n  mapping = ggplot2::aes(\n    x = year, # <- Replaced \n    y = gdpPercap, # <- Replaced \n    color = continent#, \n    #fill = continent # <- Not necessary \n  )\n) +\n  ggplot2::geom_point() \ngdp_dyn_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\nThis is not so bad! But it would be nice to add an additional geom that \nconnects the dots with lines. No problem, simply add `ggplot2::geom_line()`\nto the plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_dyn_plot <- gdp_dyn_plot +\n  geom_line()\ngdp_dyn_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\nMuch of the code above only requires slight adjustments: the scaling of the\n`x`-axis should now be applied to the `y`-axis so we change \n`ggplot2::scale_x_continuous()` into `ggplot2::scale_y_continuous()`.\nMoreover, colors should change not for the `fill` but the `color` aesthetic,\nso `ggplot2::scale_fill_brewer()` becomes `ggplot2::scale_color_brewer()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_dyn_plot <- gdp_dyn_plot +\n  ggplot2::scale_y_continuous(\n    labels = scales::number_format(scale = 0.001, suffix = \"k\")\n  ) + \n  ggplot2::scale_color_brewer(\n    palette = \"Dark2\"\n    )\ngdp_dyn_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\nAside from this, we can pretty much re-use almost the entire code from above\nwith which we adjusted the legend, the labels, as well as the overall theme,\nonly we can be so bold to remove the title of the `x`-axis via\n`axis.title.x = ggplot2::element_blank()`. Moreover, since we do not map the \npopulation size, `ggplot2::scale_size_continuous()` can now be removed, \nresulting in:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdp_dyn_plot <- gdp_dyn_plot +\n  labs(\n    title = \"The divergence of income per capita\", \n    caption = \"Note: country data averaged over continants. Data: Gapminder\",\n    y = \"GDP per capita (int. Dollar)\"\n  ) +\n  ggplot2::theme_bw() +\n  theme(\n    legend.position = \"bottom\",\n    legend.title = ggplot2::element_blank(),\n    panel.border = ggplot2::element_blank(),\n    axis.line = ggplot2::element_line(colour = \"grey\"),\n    axis.ticks = ggplot2::element_line(colour = \"grey\"),\n    axis.title.x = ggplot2::element_blank()\n  )\ngdp_dyn_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\nAgain, a very nice plot - and much faster to complete than the first one,\nthanks to the amazingly consistent syntax of `ggplot2`:)\n\n# Saving your plot\n\nYou can save your plot using the function `ggplot2::ggsave()`.\nThe function saves, by default, the last plot you created, but \nit is better to specify the plot you want to save directly. Other\nimportant arguments are the file name (which also determines the\nformat), and the size:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggsave(\n  plot = gdp_plot, \n  filename = \"gdp_plot.pdf\", \n  width = 6, height = 4.2)\n```\n:::\n\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}