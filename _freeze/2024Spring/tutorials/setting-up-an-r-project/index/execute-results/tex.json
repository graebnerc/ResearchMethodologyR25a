{
  "hash": "ff83223a28cf95a827f22e63c0dc4e19",
  "result": {
    "markdown": "---\ntitle: Setting up an R project # Also check out line 43\nauthor: Claudius Gräbner-Radkowitsch\ndate: '2024-04-25'\ndocumentclass: scrartcl\nformat: \n  html:\n    theme: readable\n    highlight: tango\n    toc: true\n    toc_depth: 2\n    number_sections: true\n  pdf:\n    papersize: a4\n    toc: true\n    toc-depth: 2\n    number-sections: true\n    include-in-header: \n      text: |\n        \\usepackage{lmodern} \n        \\usepackage{graphicx}\n        \\usepackage{hyperref}\n        \\usepackage{url}                \n        \\usepackage{xcolor}\n        \\usepackage{booktabs}\n        \\usepackage{listings}\n        \\lstloadlanguages{R}\n        \n        \\definecolor{eufblue}{RGB}{0,57,91}\n        \\definecolor{eufgrey}{RGB}{111,111,111}\n        \\definecolor{euflightblue}{RGB}{105,170,205}\n        \n        \\hypersetup{\n        pdfauthor={Claudius Graebner-Radkowitsch}\n        colorlinks=true,\n        linkcolor=euflightblue,\n        urlcolor=euflightblue\n        }\n        \\usepackage[includehead,includefoot,top=2cm, bottom=1.5cm]{geometry}\n        \\usepackage[headsepline, footsepline]{scrlayer-scrpage}\n        \\pagestyle{scrheadings}\n        \\clearpairofpagestyles\n        \\ihead{Tutorial: Setting up an R project}\n        %\\chead{Kopfzeile Mitte}\n        \\ohead{\\pagemark} %\n        \\ifoot{}\n        \\cfoot{\\href{https://euf-datascience-spring24.netlify.app/}{\\normalfont\\color{eufblue}{Data Science Using R - Spring Semester 2024}}} % Fußzeile Mitte\n        \\ofoot{} \n        \\setkomafont{disposition}{\\color{eufblue}\\bfseries}\n---\n\n\n\n\n# Introduction\n\nThis post is about how you set up an adequate project environment.\nBy this I mean the folders you should create, and how you should save your\nfiles. The structure introduced here will help you to keep your project \nstructured and to keep an overview about your work, but also to \nmake it easier to share your project with others.\n\nIn all, whenever you start a new programming project you should set up the \ninfrastructure described below. Such project could be a term paper, a research\nendeavor, or just the code to create some visualizations. Later you might find\nthat some aspects of the infrastructure below feel like a bit of an overkill,\nespecially for very small undertakings. But especially in the beginning its better\nto be save than sorry and to set up the whole project as described below.\n\nIn all, setting up a good working environment includes the following steps:\n\n1. Find a good place for the project on your computer.\n2. Create a directory with an R project\n3. Create the relevant sub-directories\n\nThen you should always familiarize yourself with how to use the `here`-package \nwith your project.\n\nThere are some additional steps one might to take, such as initiating a \n[Git repository](https://happygitwithr.com/index.html)\nor setting up a \n[renv environment](https://rstudio.github.io/renv/articles/renv.html)\n. \nMoreover, for larger projects you might also want to add a `README.md`.\nBut for now the steps mentioned above are sufficient.\nBut before going through them one by one, we need to clarify two important \ntechnical concepts:\n\n(1) the concept of a *working directory* and \n(2) the distinction between *absolute* and *relative* paths\n\n# Preface: Working directory and paths\n\nThe [working directory](https://en.wikipedia.org/wiki/Working_directory) \nis a folder on the computer which R uses as an default anchor\nfor all file paths used to accesses input, such as data sets, or to store\noutput. \nThe default working directory the user directory, but it can be changed.\nWe can display the current working directory using the `getwd()` function.\nIn my case the working directory looks like this:\n\n```\n/Users/graebnerc/Teaching/DataScience22/\n```\n\nNow assume we produced a plot in our current session and want to save it using \nthe function `ggplot2::ggsave()`. As we already learned, this function takes, \namong others, an argument `filename` that specifies the name of the file that is \nmeant to contain the plot.\nNow if I were to tell R to save the plot under the name `test.pdf` like this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggsave(filename = \"test.pdf\")\n```\n:::\n\n\n\nR would save it in the following location:\n\n```\n/Users/graebnerc/Teaching/DataScience22/test.pdf\n```\n\nAs you can see R uses the current working directory as an 'anchor', and\nall paths provided are *relative* to this anchor. \nThis means that, assuming that in our working directory exists a folder \ncalled `output`, we could save our file `test.pdf` in this folder by making\nthe following function call:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggsave(filename = \"output/test.pdf\")\n```\n:::\n\n\n\nViewed upon from a global perspective the file is saved here:\n\n```\n/Users/graebnerc/Teaching/DataScience22/output/test.pdf\n```\n\nSince the path provided is *relative* to the working directory, we call paths \nsuch as those we would have passed to `ggsave()` above as **relative paths**.\n\nAlternatively, we could also provide R directly with the *absolute path*.\nIn this case, we would need to type the complete path, starting from the \n[root directory](https://de.wikipedia.org/wiki/Stammverzeichnis) of the \ncomputer.\nRather then assuming the absolute path implicitly as above, we would need to \ndo the following call:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggsave(\n  filename = \"/Users/graebnerc/Teaching/DataScience22/output/test.pdf\"\n  )\n```\n:::\n\n\n\nWhen we use absolute paths, we can save a file at any position on the computer\nwe want. For instance, we do the following\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggsave(\n  filename = \"/Users/graebnerc/GreatPlots/test.pdf\"\n  )\n```\n:::\n\n\n\nto save the file here:\n\n```\n/Users/graebnerc/GreatPlots/test.pdf\n```\n\nWhile it seems to be attractive to use absolute paths because of their expressive\npower, i.e. the possibility to save files anywhere we want, I can only advice \nagainst using them. In fact, absolute paths are something that you *might* use\nin your console when you want to save a file quickly during a private programming\nsession. But you should *never* use absolute paths in scripts.\n\nA central argument in favor of relative paths is that code using relative paths\ncan function when executed on different computers. Absolute paths look different\non every computer, so they will always produce errors when being transferred across\ncomputers. Have a look at the following path from above:\n\n```\n/Users/graebnerc/Teaching/DataScience22/output/test.pdf\n```\n\nI hope you agree that it is *highly unlikely* that a path involving my account\nname exists on your computer. Thus, if I sent you a script that contains a \nreference to this path, it will produce an error once you execute it. Thus, we\nwill always use relative paths below.\n\nOf course, one problem is that the 'anchor' from which the relative path will\nbe evaulated on my and your computer must somehow be harmonized. As we will \nlearn below, this can be achieved through the use of R project files and the\npackage  [here](https://here.r-lib.org/).\n\n# Step 1: Find a good place for the project on your computer\n\nFirst of all you have to decide on a place on your computer in which\nall data related to your project, i.e. data, scripts, images, \netc., should be saved.\nIt is usually a good idea to avoid places such as the Desktop or your\nDownload folder.\n\n# Step 2: Create an R-project\n\nAfter having identified the right place for our project on our computer, we\nwill now create an R-project at exactly this place. To this place, open R-Studio,\nand either click on `File/New Project`, or on the blue botton in the upper \nleft part of the pane, directly to the right of the `New File` button. \nYou should now see the 'New Project Wizard':\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](new-proj-1.pdf){fig-align='center' width=60%}\n:::\n:::\n\n\n\nWe click on `New Directory`^[We could also have created a folder in the\nprevious step and then chosen this folder here via `Existing directory`. This\nis useful if you want to add an R project file to an already existing project, \nbut the approach of creating a new directory is more general and should be\nyour default approach.] and then on `New Project`. Then we should see the \nfollowing:\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](new-proj-2.pdf){fig-align='center' width=60%}\n:::\n:::\n\n\n\nWe first add the name of our project in the field `Directory name`.\nThe name should not contain any special characters or blanks, and should be\ninformative about the content of the project. I this example I have chosen the\ntitle `DataScienceLecture`.\nBelow you choose the location for the project that you have determined in the\nprevious step. \nBy clicking on `Create Project`, R-Studio creates a folder of the name of \nthe project within in the directory you have chosen in step 1.\nWithin this folder, R-Studio automatically creates a file called\n`NameOfYourProject.Rproj` (here: `DataScienceLecture.Rproj`).\n\nFrom now on, whenever you want to work on this project you can just double click\non this project file to open R-studio and link it to this project automatically.\nAlternatively, you can also open R Studio, and then open the project by \nchoosing the `.Rproj` file via `File/Open Project...`.\n\nYou should always make sure that when you work on your project using R-Studio,\nthe current session is linked to this project. You can see the project your\ncurrent session is linked to in the upper right of the R-Studio pane:\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](new-proj-3.pdf){fig-align='center' width=60%}\n:::\n:::\n\n\n\nLinking your current session to a project comes with many advantages: not only\nis your working directory automatically set to the project folder, you can also\naccess previous commands in a command history, and its easier to transfer the\nproject from one computer to another.\n\nIn the next step, you will now populate the newly created project directory\nwith folders.\n\n# Step 3: Create the relevant sub-directories\n\nA sensible directory structure helps (1) not to lose track of one's programming \nproject, (2) to collaborate with others across computers, and \n(3) to use collaboration platforms such as Github and to conduct research \nthat can be replicated and understood by others.\n\nThe following directory structure is an established recommendation. \nIn some projects you may not need all the sub-directories suggested here, \nin others, it may be more appropriate to use more.\nIn any case, the structure below is usually an excellent starting point, and it\nalso the default one that I and many others use in most research projects.\n\nOverall, the following folders should be created in your project directory:\n\n* A subdirectory `data` in which you save all the data used in the project. \nExcept for cases where you use very few different data sets, it is generally \nadvisable to create two subfolders within `data`:\nA subdirectory `raw` which contains the raw data as it was downloaded from the\ninternet or collected from an experiment.\nThis raw data should **never** be changed, otherwise your work will not be fully\nreplicable and irreparable damage may occur. \nAll changes to the data should be documented by scripts\nthat take the raw data as input and generate a modified data set as output. \nThis modified data set should then be stored in the subdirectory `tidy.`\n\n> **Example:** You download data on GDP in Germany from Eurostat and data on\nunemployment from AMECO. \nBoth data sets should be saved in the subfolder `data/raw`, and they should\nnever be manipulated.\nRather, you may write a script `setup_data.R`, which you save in `R`, and which \nimports both datasets, transforms them and creates the combined dataset called\n`macro_data.csv`. This is a [tidy](https://r4ds.had.co.nz/tidy-data.html) \ndata set (you learn how to produce such data sets later in this course), \nwhich you can save in the directory `data/tidy`,\nand that will be the vantage point for further analysis.\nThis will allow everyone to see how the data you have used has resulted from \nthe raw data and your work remains completely reproducible and transparent. \n\n* A subdirectory `R`, which contains all R scripts, i.e. files ending with `.R`.\n\n* A subdirectory `output`, in which you save all output produced by the scripts\nfrom `R`, such as tables or plots. The content of this folder must be fully \nreplicable using the content of the folders `R` and `data`. If you produce a \nlot of output, it might be useful to create additional subdirectories, such as\n`tables` or `figures.`\n\n* A subdirectory `text`, in which you save all written text, e.g. the report\nyou are writing, or your lecture notes.\n\n* A subdirectory `misc` in which you stuff everything that does not fit into \nany of the other directories. Such a directory is important: you should not \nsave any misceallenous files in the root directory. This will cause a lot of \nconfusion. As a rule of thumb, the only files you should keen in your project\nmain directory is the `.Rproj` file and, if applicable a `LICENSE.md` containing\na license for your code, and a `README.md` file in which you explain the \ncontent and functioning of your project.\n\nAssuming our project directory is called `DataScienceLecture`, the the default\ndirectory structure would look like this:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\nNow that you have set up a sensible directory structure, the only thing you are\nmissing for woriless project work is the knowledge of how to use the \n`here`-package. This helps us to remedy the problem of finding a sensible anchor\nfor out relative paths, as discussed in the first section.\n\n# Creating portable relative paths using the here-package\n\nThe [here](https://github.com/r-lib/here)-package allows you to create \nfile paths in a way that those parts of your code that contain file paths\nalways work across different computers.\n\nAs described above, you should always use *relative* paths in everyday work.\nIn two situations, however, the use of relative paths can be problematic\n(1) when collaborating with others, and (2) when using \nR Markdown.^[With R Markdown you can write texts directly in `R`.\nThis allows you to keep statistical analysis and the description of the results \nin one document.\nThis homepage, for example, was also written entirely in R Markdown.\nYou will learn how to use R-Markdown soon.].\n\nSuppose, for instance, that Birte and Claudius are working together on an R \nscript. \nThe following line appears in the code:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggsave(filename = \"output/nice_plot.pdf\")\n```\n:::\n\n\n\nThis code saves a plot in a pdf file in the subdirectory `output/`.\nFor the file to be saved in the right directory, both Birte and Claudius must \nuse the same working directory, otherwise the relative path would point to \ndifferent locations on their computers (see the first section above).\n\nAlternatively, Claudius could use an absolute path:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggsave(\n  filename = \"/Users/claudius/projects/R-Projekt-Birte/output/nice_plot.pdf\")\n```\n:::\n\n\n\n\nWhile this makes sure that the file will be saved in the right place on *his*\ncomputer, irrespective of his working directory, the likelihood that this code\nalso works when executed on Birte's computer is basically zero per cent:\nalmost certainly the script is saved on a different location on her computer. \nShe would then need to adjust the absolute path to her needs, e.g. to:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggsave(\n  filename = \"/Users/Birte/projects/R-Projekt-Claudius/output/nice_plot.pdf\")\n```\n:::\n\n\n\nThis code, of course, would not work on Claudius' computer. A dilemma.\nOne remedy would be to adjust the script before using it. But this would be \nannoying and antiquated. \nIt would also be very bad coding style: you should write your code always in\na way that it works on different computers. In the end, collaboration should be\nfun, not pain.\n\nFortunately, the problem can be solved easily using the function `here::here()`.\nHere *both* of them simpy write:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggsave(\n  filename = here::here(\"output/nice_plot.pdf\"))\n```\n:::\n\n\n\nThe function `here::here()` automatically constructs an absolute path tailored\nto the needs of their computers. When Claudius would call\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere::here(\"output/nice_plot.pdf\")\n```\n:::\n\n\n\nthe output would be:\n\n```\n\"/Users/claudius/projects/R-Projekt-Birte/output/nice_plot.pdf\"\n```\n\nAnd if Birte made this call on her computer the output would be:\n\n```\n\"/Users/Birte/projects/R-Projekt-Claudius/output/nice_plot.pdf\"\n```\n\nThis way, the two can simply exchange the code with each other without\nhaving to adjust the code to their local paths.\nFor this reason, and because of some other potential difficulties that we will\ndiscuss later, you should *always* formulate paths using the \n`here::here()` function.\nThis is a little extra work, but it saves a lot of trouble in the long run.\n\nFor `here::here()` to work, however, you need to clarify the position of your\nscript relative to the root directory of your project at the very beginning of\nyour script. By 'root directory of your project' I mean the name of the directory\ncontaining your `.Rproj` file.\n\nTo clarify the relative position of the script, you should add the following \nfunction call *in the first line of your script*:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere::i_am(\"Relative path to script.\")\n```\n:::\n\n\n\nIn the case you are working on the script `set_up_data.R`, which is located \ncorrectly in the `R`-directory as follows:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\nThen the first line of `set_up_data.R` should be:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere::i_am(\"R/set_up_data.R\")\n```\n:::\n\n\n\nThis ensures that subsequent calls of `here::here()` construct the correct \nabsolute paths.\n\n> **Note:** The call of `here::i_am()` at the very beginning of a script is an\nexception to the important rule that a script should always start with a \nreference to the packages used within the script.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}