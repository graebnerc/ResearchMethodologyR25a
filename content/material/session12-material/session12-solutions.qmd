---
title: "Possible solutions for the recap exercises"
author: "Claudius Gräbner-Radkowitsch"
format: 
  html:
    number-sections: true
    table-of-contents: true
    toc-location: right
  pdf: 
    number-sections: true
    table-of-contents: true
execute: 
  echo: true
  warning: false
  message: false
---


# Packages used

```{r}
library(here)
library(dplyr)
library(tidyr)
library(ggplot2)
library(data.table)
```

# CO2

We first import the raw data. 
Please make sure you use the `here`-package and adjust the relative paths
of the following code.

Since many of the column headers were numbers (a.k.a. years), we need to 
make explicit that these are not values but header names. We do so by seeting 
the optional argument `header = TRUE`:

```{r}
co2_data_raw <- fread("co2_raw.csv", header = TRUE) 
```

After inspecting the data using functions such as `str()`, `unique()` or
`head()`, we first remove colums we obviously do not need and that might be
irritating:

```{r}
co2_data_tidy_1 <- co2_data_raw %>% 
  select(-c(
    "Indicator Name", "Indicator Code", 
    # unique() tells you there is only one indicator
    "Country Code", # Not needed
    "V69" # Sometimes such erroneous columns are part of what you download
  ))
```

We then move the year columns into rows by using `tidyr::pivot_longer()`:

```{r}
co2_data_tidy_2 <- co2_data_tidy_1 %>% 
  tidyr::pivot_longer(
    cols = -"Country Name", 
    names_to = "year", 
    values_to = "co2_percap") 
head(co2_data_tidy_2)
```

We see that the year column is still a `character`. So me transform it into
a `double` to then filter the years. 
We can also filter for the required countries within the same function call
and then rename the column:

```{r}
co2_data_tidy_3 <- co2_data_tidy_2 %>% 
  mutate(year = as.double(year)) %>% 
  filter(
    year >= 2000, year<=2020, 
    `Country Name` %in% c(
      "South Africa", "United States", "Sub-Saharan Africa", 
      "European Union", "Germany", "China")
  ) %>% 
  rename(country = `Country Name`)
```

We could have done everything in one call as well:

```{r}
co2_data_tidy <- co2_data_raw %>% 
  select(-c(
    "Indicator Name", "Indicator Code", 
    # unique() tells you there is only one indicator
    "Country Code", # Not needed
    "V69" # Sometimes such erroneous columns are part of what you download
  )) %>% 
  tidyr::pivot_longer(
    cols = -"Country Name", 
    names_to = "year", 
    values_to = "co2_percap") %>% 
  mutate(year = as.double(year)) %>% 
  filter(
    year >= 2000, year<=2020, 
    `Country Name` %in% c(
      "South Africa", "United States", "Sub-Saharan Africa", 
      "European Union", "Germany", "China")
  ) %>% 
  rename(country = `Country Name`)
```

Then think about a useful location to store the data and do something like:

```{r}
#| eval: false
fwrite(co2_data_tidy, file = here("data/tidy/co2_tidy.csv"))
```


# Data wrangling I

Please make sure you use the `here`-package and adjust the relative paths
of the following code:

Compute, for each country, the percentage change of the spending from the
year 2010 to the year 2020 and save this as a variable called `perc_change`.

```{r}
educ_exercise_data_raw <- fread("education_income.csv") 

educ_exercise_data <- educ_exercise_data_raw %>%
  dplyr::select(-c("income", "GDPpc")) %>% 
  dplyr::filter(year %in% c(2010, 2020)) %>% 
  tidyr::pivot_wider(
    names_from = "year", 
    values_from = "EducationSpending"
    ) %>% 
  dplyr::mutate(
    perc_change = ((`2020`-`2010`)/`2010`)*100
    ) %>% 
  dplyr::filter(!is.na(perc_change))
head(educ_exercise_data)
```

Then think about a useful location to store the data and do something like:

```{r}
#| eval: false
data.table::fwrite(
  x = educ_exercise_data, 
  file = here("data/tidy/educ_perc_change.csv"))
```


# Data wrangling II

We use `educ_exercise_data_raw` as imported above as a starting point and 
proceed as follows:

Compute for each income group the average expense of education
over the whole period. Make sure missing
values are ignored. 

Save the new data set under a useful name in an adequate location.

```{r}
educ_exercise_summarized <- educ_exercise_data_raw %>% 
  dplyr::summarise(
    EducExpense_avg = mean(EducationSpending, na.rm = TRUE), 
    .by = "income") 
educ_exercise_summarized
```

Then think about a useful location to store the data and do something like:

```{r}
#| eval: false
data.table::fwrite(
  x = educ_exercise_summarized, 
  file = here("data/tidy/educ_perc_income-groups.csv"))
```
# Visualization and Quarto

The quarto header should look like this:

```
title: "Sessions 12 and 13: Recap and Practice"
author: "Claudius Gräbner-Radkowitsch"
format: 
  html:
    number-sections: true
    table-of-contents: true
    toc-location: body
execute: 
  echo: false
  warning: false
  message: false
```

# Visualization and Quarto

To read in the data set do something as the following, but make sure you are
using the `here`-package and set the path accordingly.

```{r}
child_mortality <- data.table::fread("child_mortality.csv")
head(child_mortality)
```

To summarize the data:

```{r}
child_mortality_summarized <- child_mortality %>% 
  dplyr::summarise(
    ChildMortality = mean(ChildMortality, na.rm = TRUE), 
    GDPpc = mean(GDPpc, na.rm = TRUE),
    .by = "iso3c")
head(child_mortality_summarized)
```

We can then directly create a simple scatter plot:

```{r}
ggplot2::ggplot(
  data = child_mortality_summarized, 
  mapping = aes(x = GDPpc, y = ChildMortality)
  ) +
  geom_point() +
  theme_linedraw()
```

We see a clear non-linear relationship. 

We now plot the data in logarithms. You can do this by changing the 
underlying data, rescale an axis, or make the change directly in the
`data` argument of `ggplot2::ggplot()`:

```{r}
ggplot2::ggplot(
  data = child_mortality_summarized, 
  mapping = aes(x = log(GDPpc), y = log(ChildMortality))
  ) +
  geom_point() +
  theme_linedraw()
```

The relationship now becomes almost linear. This is typical for relationships
that are exponential. We can say: an increase in GDP per capita by one percent
is on average associated with a reduction of child mortality by 0.83 per cent
(the latter value is given by a regression, but we come to this later).